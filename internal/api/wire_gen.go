// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package api

import (
	"allaboutapps.dev/aw/go-starter/internal/auth"
	"allaboutapps.dev/aw/go-starter/internal/config"
	"allaboutapps.dev/aw/go-starter/internal/data/local"
	"allaboutapps.dev/aw/go-starter/internal/metrics"
	"database/sql"
	"github.com/google/wire"
	"testing"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

// InitNewServer returns a new Server instance.
func InitNewServer(server config.Server) (*Server, error) {
	db, err := NewDB(server)
	if err != nil {
		return nil, err
	}
	mailer, err := NewMailer(server)
	if err != nil {
		return nil, err
	}
	service, err := NewPush(server, db)
	if err != nil {
		return nil, err
	}
	i18nService, err := NewI18N(server)
	if err != nil {
		return nil, err
	}
	v := NoTest()
	clock := NewClock(v...)
	authService := NewAuthService(server, db, clock)
	localService := local.NewService(server, db, clock)
	metricsService, err := metrics.New(server, db)
	if err != nil {
		return nil, err
	}
	apiServer := newServerWithComponents(server, db, mailer, service, i18nService, clock, authService, localService, metricsService)
	return apiServer, nil
}

// InitNewServerWithDB returns a new Server instance with the given DB instance.
// All the other components are initialized via go wire according to the configuration.
func InitNewServerWithDB(server config.Server, db *sql.DB, t ...*testing.T) (*Server, error) {
	mailer, err := NewMailer(server)
	if err != nil {
		return nil, err
	}
	service, err := NewPush(server, db)
	if err != nil {
		return nil, err
	}
	i18nService, err := NewI18N(server)
	if err != nil {
		return nil, err
	}
	clock := NewClock(t...)
	authService := NewAuthService(server, db, clock)
	localService := local.NewService(server, db, clock)
	metricsService, err := metrics.New(server, db)
	if err != nil {
		return nil, err
	}
	apiServer := newServerWithComponents(server, db, mailer, service, i18nService, clock, authService, localService, metricsService)
	return apiServer, nil
}

// wire.go:

// serviceSet groups the default set of providers that are required for initing a server
var serviceSet = wire.NewSet(
	newServerWithComponents,
	NewPush,
	NewMailer,
	NewI18N,
	authServiceSet, local.NewService, metrics.New, NewClock,
)

var authServiceSet = wire.NewSet(
	NewAuthService, wire.Bind(new(AuthService), new(*auth.Service)),
)
