// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PublicHTTPErrorType Type of error returned, should be used for client-side error handling
//
// swagger:model publicHttpErrorType
type PublicHTTPErrorType string

func NewPublicHTTPErrorType(value PublicHTTPErrorType) *PublicHTTPErrorType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PublicHTTPErrorType.
func (m PublicHTTPErrorType) Pointer() *PublicHTTPErrorType {
	return &m
}

const (

	// PublicHTTPErrorTypeGeneric captures enum value "generic"
	PublicHTTPErrorTypeGeneric PublicHTTPErrorType = "generic"

	// PublicHTTPErrorTypePUSHTOKENALREADYEXISTS captures enum value "PUSH_TOKEN_ALREADY_EXISTS"
	PublicHTTPErrorTypePUSHTOKENALREADYEXISTS PublicHTTPErrorType = "PUSH_TOKEN_ALREADY_EXISTS"

	// PublicHTTPErrorTypeOLDPUSHTOKENNOTFOUND captures enum value "OLD_PUSH_TOKEN_NOT_FOUND"
	PublicHTTPErrorTypeOLDPUSHTOKENNOTFOUND PublicHTTPErrorType = "OLD_PUSH_TOKEN_NOT_FOUND"

	// PublicHTTPErrorTypeZEROFILESIZE captures enum value "ZERO_FILE_SIZE"
	PublicHTTPErrorTypeZEROFILESIZE PublicHTTPErrorType = "ZERO_FILE_SIZE"

	// PublicHTTPErrorTypeUSERDEACTIVATED captures enum value "USER_DEACTIVATED"
	PublicHTTPErrorTypeUSERDEACTIVATED PublicHTTPErrorType = "USER_DEACTIVATED"

	// PublicHTTPErrorTypeINVALIDPASSWORD captures enum value "INVALID_PASSWORD"
	PublicHTTPErrorTypeINVALIDPASSWORD PublicHTTPErrorType = "INVALID_PASSWORD"

	// PublicHTTPErrorTypeNOTLOCALUSER captures enum value "NOT_LOCAL_USER"
	PublicHTTPErrorTypeNOTLOCALUSER PublicHTTPErrorType = "NOT_LOCAL_USER"

	// PublicHTTPErrorTypeTOKENNOTFOUND captures enum value "TOKEN_NOT_FOUND"
	PublicHTTPErrorTypeTOKENNOTFOUND PublicHTTPErrorType = "TOKEN_NOT_FOUND"

	// PublicHTTPErrorTypeTOKENEXPIRED captures enum value "TOKEN_EXPIRED"
	PublicHTTPErrorTypeTOKENEXPIRED PublicHTTPErrorType = "TOKEN_EXPIRED"

	// PublicHTTPErrorTypeUSERALREADYEXISTS captures enum value "USER_ALREADY_EXISTS"
	PublicHTTPErrorTypeUSERALREADYEXISTS PublicHTTPErrorType = "USER_ALREADY_EXISTS"

	// PublicHTTPErrorTypeMALFORMEDTOKEN captures enum value "MALFORMED_TOKEN"
	PublicHTTPErrorTypeMALFORMEDTOKEN PublicHTTPErrorType = "MALFORMED_TOKEN"

	// PublicHTTPErrorTypeLASTAUTHENTICATEDATEXCEEDED captures enum value "LAST_AUTHENTICATED_AT_EXCEEDED"
	PublicHTTPErrorTypeLASTAUTHENTICATEDATEXCEEDED PublicHTTPErrorType = "LAST_AUTHENTICATED_AT_EXCEEDED"

	// PublicHTTPErrorTypeMISSINGSCOPES captures enum value "MISSING_SCOPES"
	PublicHTTPErrorTypeMISSINGSCOPES PublicHTTPErrorType = "MISSING_SCOPES"
)

// for schema
var publicHttpErrorTypeEnum []interface{}

func init() {
	var res []PublicHTTPErrorType
	if err := json.Unmarshal([]byte(`["generic","PUSH_TOKEN_ALREADY_EXISTS","OLD_PUSH_TOKEN_NOT_FOUND","ZERO_FILE_SIZE","USER_DEACTIVATED","INVALID_PASSWORD","NOT_LOCAL_USER","TOKEN_NOT_FOUND","TOKEN_EXPIRED","USER_ALREADY_EXISTS","MALFORMED_TOKEN","LAST_AUTHENTICATED_AT_EXCEEDED","MISSING_SCOPES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicHttpErrorTypeEnum = append(publicHttpErrorTypeEnum, v)
	}
}

func (m PublicHTTPErrorType) validatePublicHTTPErrorTypeEnum(path, location string, value PublicHTTPErrorType) error {
	if err := validate.EnumCase(path, location, value, publicHttpErrorTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this public Http error type
func (m PublicHTTPErrorType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePublicHTTPErrorTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this public Http error type based on context it is used
func (m PublicHTTPErrorType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
